# DEALING WITH MULTIPLE FILES
# We can combine the use of glob, a Python library for working with files, with pandas to organize this data better. 
# glob can open multiple files by using regex matching to get the filenames
# We have 10 different files containing 100 students each. These files follow the naming structure:
exams0.csv
exams1.csv
… up to exams9.csv
# We are going to import each file using pandas, and combine all of the entries into one DataFrame.
# First, create a variable called student_files and set it equal to the glob() of all of the csv files we want to import.
# Create an empty list called df_list that will store all of the DataFrames we make from the files exams0.csv through exams9.csv.
# Loop through the filenames in student_files, and create a DataFrame from each file. Append this DataFrame to df_list.

import codecademylib3_seaborn
import pandas as pd
import glob

student_files = glob.glob('exams*.csv')
df_list = []

for files in student_files:
  data = pd.read_csv(files)
  df_list.append(data)
  
# Concatenate all of the DataFrames in df_list into one DataFrame called students.
# Print students and the length of students. Did we get all of them?

students = pd.concat(df_list)
print(students)
print(len(students))

# Yields 1000 rows and 6 columns of students


# RESHAPING DATA
# We can use pd.melt() to do this transformation. .melt() takes in a DataFrame, and the columns to unpack.
# The parameters you provide are:

frame: the DataFrame you want to melt
id_vars: the column(s) of the old DataFrame to preserve
value_vars: the column(s) of the old DataFrame that you want to turn into variables
value_name: what to call the column of the new DataFrame that stores the values
var_name: what to call the column of the new DataFrame that stores the variables

# There is a column for the scores on the fractions exam, and a column for the scores on the probabilities exam.
# We want to make each row an observation, so we want to transform this table.
# Use pd.melt() to create a new table (still called students) that follows this structure.
# Print the .head() and the .columns of students. Also, print out the .value_counts() of the column exam.

print(students.head())
print(students.column())
print(students['exam'].value_counts())


# DEALING WITH DUPLICATES
# It seems like in the data collection process, some rows may have been recorded twice. 
# Use the .duplicated() function on the students DataFrame to make a Series object called duplicates.
# Print out the .value_counts() of the duplicates Series to see how many rows are exact duplicates.
# Update the value of students to be the students table with the duplicates dropped.

import codecademylib3_seaborn
import pandas as pd
from students import students

duplicates = students.duplicated()
print(duplicates.value_counts())

# Yields  False    1976
          True       24

students = students.drop_duplicates()

# Use the .duplicated() function again to make a Series object called duplicates after dropping the duplicates. 
# Print out the value counts again. Are there any Trues left?

duplicates = students.duplicated()
print(duplicates.value_counts())
# Yields False    1976


# SPLITTING BY INDEX
# Print out the columns of the students DataFrame.
# The column gender_age sounds like it contains both gender and age!
# Print out the .head() of the column to see what kind of data it contains.

import codecademylib3_seaborn
import pandas as pd
from students import students

print(students.columns)
print(students['gender_age'].head())

# Yields Index(['full_name', 'gender_age', 'grade', 'exam', 'score'], dtype='object')
0    M14
1    M18
2    M18
3    M18
4    F17

# It looks like the first character of the values in gender_age contains the gender, while the rest of the string contains the age. 
# Let’s separate out the gender data into a new column called gender.
students['gender'] = students.gender_age.str[0:1]

# Now, separate out the age data into a new column called age.
students['age'] = students.gender_age.str[1:3]

# Now, we don’t need that gender_age column anymore.
# Let’s set the students DataFrame to be the students DataFrame with all columns except gender_age.
students = students[['full_name', 'grade', 'exam', 'score', 'gender', 'age']]


# SPLITTING BY CHARACTER
# The students’ names are stored in a column called full_name.
# We want to separate this data out into two new columns, first_name and last_name.
# First, let’s create a Series object called name_split that splits the full_name by the " " character.

import codecademylib3_seaborn
import pandas as pd
from students import students

students['name_split'] = students.full_name.str.split(' ')

# Now, let’s create a column called first_name that takes the first item in name_split.
students['first_name'] = students.name_split.str.get(0)

# Finally, let’s create a column called last_name that takes the second item in name_split.
students['last_name'] = students.name_split.str.get(1)


# STRING PARSING
# Use regex to take out the % signs in the score column.

import codecademylib3_seaborn
import pandas as pd
from students import students

students.score = students['score'].replace(['%'], '', regex=True)

# Convert the score column to a numerical type using the pd.to_numeric() function.
students.score = pd.to_numeric(students.score)

# Each value in grade looks like “9th grade”, “10th grade”, “11th grade”, or “12th grade”.
# We want to pare that down to just having the numerical grade. Maybe we want to do linear regression on this data, which would require numerical inputs.
# Use regex to extract the number from each string in grade and store those values back into the grade column.

split_grade = students['grade'].str.split('(\d+)', expand=True)
students['grade'] = split_grade[1]

# Convert the grade column to be numerical values instead of objects.
students['grade'] = pd.to_numeric(students['grade'])

# Calculate the mean of grade, store it in a variable called avg_grade, and then print it out!

avg_grade = students['grade'].mean()
print(avg_grade)
# Yields 10.620445344129555


# MISSING VALUES
# Get the mean of the score column. Store it in score_mean and print it out.

import codecademylib3_seaborn
import pandas as pd
from students import students

score_mean = students['score'].mean()
print(score_mean)
# Yields 77.69657422512235

# We will assume that everyone who doesn’t have a score for an exam missed the test. 
# We want to replace all nans with a score of 0. Let’s do this with the score column.
# Fill all of the nans in students['score'] with 0.
# Get the mean of the score column again. Store it in score_mean_2 and print it out.

students = students.fillna(value={'score': 0})

score_mean_2 = students['score'].mean()
# Yields 72.30971659919028
print(score_mean_2)
