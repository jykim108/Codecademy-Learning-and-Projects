# CLEANING US CENSUS DATA
# You just got hired as a Data Analyst at the Census Bureau, which collects census data and creates interesting visualizations and insights from it.
# The person who had your job before you left you all the data they had for the most recent census. It is in multiple csv files. 
# They didn’t use pandas, they would just look through these csv files manually whenever they wanted to find something. 
# Sometimes they would copy and paste certain numbers into Excel to make charts.
# Your boss wants you to make some scatterplots and histograms by the end of the day. 
# Can you get this data into pandas and into reasonable shape so that you can make these histograms?

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import codecademylib3_seaborn

# The first visualization your boss wants you to make is a scatterplot that shows average income in a state vs proportion of women in that state.
# Open some of the census csv files in the navigator (click the file icon in the top left corner of the code editor and then click on any of the csv files to open them). 
# How are they named? What kind of information do they hold? Will they help us make this graph?
# Using glob, loop through the census files available and load them into DataFrames. 
# Then, concatenate all of those DataFrames together into one DataFrame, called something like us_census.

import glob

states_files = glob.glob('states*.csv')
states_list = []

for files in states_files:
  data = pd.read_csv(files)
  states_list.append(data)

us_census = pd.concat(states_list)

# Look at the .columns and the .dtypes of the us_census DataFrame. Are those datatypes going to hinder you as you try to make histograms?
print(us_census.columns)
print(us_census.dtypes)

# Yields '''
Index(['Unnamed: 0', 'State', 'TotalPop', 'Hispanic', 'White', 'Black',
       'Native', 'Asian', 'Pacific', 'Income', 'GenderPop'],
      dtype='object')
Unnamed: 0     int64
State         object
TotalPop       int64
Hispanic      object
White         object
Black         object
Native        object
Asian         object
Pacific       object
Income        object
GenderPop     object
dtype: object'''

# Use regex to turn the Income column into a format that is ready for conversion into a numerical type.
us_census.Income = us_census['Income'].replace(['\$'], '', regex=True)

# Look at the GenderPop column. We are going to want to separate this into two columns, the Men column, and the Women column.
# Split the column into those two new columns using str.split and separating out those results.

us_census['split_gender'] = us_census.GenderPop.str.split('_')
us_census['Men'] = us_census.split_gender.str.get(0)
us_census['Women'] = us_census.split_gender.str.get(1)

# Convert both of the columns into numerical datatypes.
# There is still an M or an F character in each entry! We should remove those before we convert.

us_census.Men = us_census['Men'].replace('M', '', regex=True)
us_census.Women = us_census['Women'].replace('F', '', regex=True)
us_census = us_census[['State', 'TotalPop', 'Hispanic', 'White', 'Black', 'Asian', 'Pacific', 'Income', 'Men', 'Women']]

# Use matplotlib to make a scatterplot!
# plt.scatter(the_women_column, the_income_column) 

us_census['Men'] = pd.to_numeric(us_census['Men'])
us_census['Women'] = pd.to_numeric(us_census['Women'])
us_census['Income'] = pd.to_numeric(us_census['Income'])
plt.scatter(us_census.Women, us_census.Income)
plt.show()

# You want to double check your work. You know from experience that these monstrous csv files probably have nan values in them! 
# Print out your column with the number of women per state to see.
# We can fill in those nans by using pandas’ .fillna() function.
# You have the TotalPop per state, and you have the Men per state. 
# As an estimate for the nan values in the Women column, you could use the TotalPop of that state minus the Men for that state.

pop_difference = us_census.TotalPop - us_census.Men
us_census['Women'] = us_census.Women.fillna(pop_difference)


# We forgot to check for duplicates! Use .duplicated() on your census DataFrame to see if we have duplicate rows in there.
duplicates = us_census.duplicated()
print(duplicates.value_counts())

# Yields 
False    51
True      9

# Drop those duplicates using the .drop_duplicates() function.
us_census = us_census.drop_duplicates()

# Now, your boss wants you to make a bunch of histograms out of the race data that you have. Look at the .columns again to see what the race categories are.
print(us_census.columns)
# Yields Index(['State', 'TotalPop', 'Hispanic', 'White', 'Black', 'Asian', 'Pacific', 'Income', 'Men', 'Women'], dtype='object')


# Try to make a histogram for each one!
# You will have to get the columns into numerical format, and those percentage signs will have to go.
# Don’t forget to fill the nan values with something that makes sense!
# NOTE: Only Pacific seems to have nan values

us_census.Hispanic = us_census['Hispanic'].replace(['%'], '', regex=True)
us_census.White = us_census['White'].replace(['%'], '', regex=True)
us_census.Black = us_census['Black'].replace(['%'], '', regex=True)
us_census.Asian = us_census['Asian'].replace(['%'], '', regex=True)
us_census.Pacific = us_census['Pacific'].replace(['%'], '', regex=True)

us_census['Hispanic'] = pd.to_numeric(us_census['Hispanic'])
us_census['White'] = pd.to_numeric(us_census['White'])
us_census['Black'] = pd.to_numeric(us_census['Black'])
us_census['Asian'] = pd.to_numeric(us_census['Asian'])
us_census['Pacific'] = pd.to_numeric(us_census['Pacific'])

pacific_pop = 100 - (us_census.Hispanic + us_census.White + us_census.Black + us_census.Asian)
us_census['Pacific'] = us_census.Pacific.fillna(pacific_pop)

plt.hist(us_census['Hispanic'])
plt.hist(us_census['White'])
plt.hist(us_census['Black'])
plt.hist(us_census['Asian'])
plt.hist(us_census['Pacific'])
plt.show()


# Try to make some more interesting graphs to show your boss, and the world! 
# You may need to clean the data even more to do it, or the cleaning you have already done may give you the ease of manipulation you’ve been searching for.

# SELF-PROJECT: What, if any, is the difference between income in states dominated by women population between men and women?

us_census['Women Percent'] = (us_census['Women']/us_census['TotalPop']) * 100

mylambda = lambda row: row['Income'] if row['Women Percent'] > 50 else None

def avg_list(lst):
  return sum(lst) / len(lst)

us_census['Income in Women Dominate State'] = us_census.apply(mylambda, axis=1)
us_census = us_census.dropna()
print(avg_list(us_census['Income in Women Dominate State']))
# Yields 55216.83643445764

mylambda = lambda row: row['Income'] if row['Women Percent'] < 50 else None
us_census['Income in Men Dominate State'] = us_census.apply(mylambda, axis=1)
us_census = us_census.dropna()
print(avg_list(us_census['Income in Men Dominate State']))
# Yields 59216.54785846784
# Data Interpretation: Income is nearly 7000 more in Men-Dominate states
