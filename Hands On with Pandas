# Creating Data Frames

# You run an online clothing store called Panda’s Wardrobe. You need a DataFrame containing information about your products.
# Create a DataFrame with the following data that your inventory manager sent you.
# Add the code to create the columns Product Name and Color and their associated data.

import codecademylib3
import pandas as pd

df1 = pd.DataFrame({
  'Product ID': [1, 2, 3, 4],
  # add Product Name and Color here
  'Product Name': ['t-shirt', 't-shirt', 'skirt', 'skirt'],
  'Color': ['blue', 'green', 'red', 'black']
})

print(df1)

# You can also add data using lists.
# You’re running a chain of pita shops called Pita Power. You want to create a DataFrame with information on your different store locations.
# Use a list of lists to create a DataFrame with the following data.

import codecademylib3
import pandas as pd

df2 = pd.DataFrame([
  [1, 'San Diego', 100],
  [2, 'Los Angeles', 120],
  # Fill in rows 3 and 4
  [3, 'San Francisco', 90],
  [4, 'Sacramento', 115]
  ],
  columns=[
    #add column names here
  'Store ID', 'Location', 'Number of Employees'])

print(df2)

# Comma Separate Variables
# You run a cupcake store and want to create a record of all of the cupcakes that you offer.
# Write the following data as a CSV in cupcakes.csv.

name,cake_flavor,frosting_flavor,topping
Chocolate Cake,chocolate,chocolate,chocolate shavings
Birthday Cake,vanilla,vanilla,rainbow sprinkles
Carrot Cake,carrot,cream cheese,almonds

# Loading and Saving CSVs

# You’re working for the County of Whoville and you just received a CSV of data about the different cities in your county. 
# Read the CSV 'sample.csv' into a variable called df, so that you can learn more about the cities.
# Type print(df) on the next line and then run your code. What sort of data were you sent?

import codecademylib3
import pandas as pd

df = pd.read_csv('sample.csv')
print(df)

# You’re working for a Hollywood studio, trying to use data to predict the next big hit. 
# Load the CSV imdb.csv into a variable called df, so that you can learn about popular movies from the past 90 years.
# Let’s learn about these movies.

import codecademylib3
import pandas as pd

#load the CSV below:

df = pd.read_csv('imdb.csv')
print(df.head())

  id                                       name   genre  year  imdb_rating
0   1                                     Avatar  action  2009          7.9
1   2                             Jurassic World  action  2015          7.3
2   3                               The Avengers  action  2012          8.1
3   4                            The Dark Knight  action  2008          9.0
4   5  Star Wars: Episode I - The Phantom Menace  action  1999          6.6

# What exactly is in this dataset?
print(df.info())

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 220 entries, 0 to 219
Data columns (total 5 columns):
id             220 non-null int64
name           220 non-null object
genre          220 non-null object
year           220 non-null int64
imdb_rating    220 non-null float64
dtypes: float64(1), int64(2), object(2)
memory usage: 8.7+ KB
None

# Selecting Columns
# Select the column as if you were selecting a value from a dictionary using a key. In our example, we would type customers['age'] to select the ages.
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)

# If the name of a column follows all of the rules for a variable name (doesn’t start with a number, doesn’t contain spaces or special characters, etc.).
# Then you can select it using the following notation: df.MySecondColumn. 
# In our example, we would type customers.age.

clinic_north = df.clinic_north
print(type(clinic_north))
print(type(df))

# Prints <class 'pandas.core.series.Series'> AND <class 'pandas.core.frame.DataFrame'>

# Now, you want to compare visits to the Northern and Southern clinics.
# Create a variable called clinic_north_south that contains ONLY the data from the columns clinic_north and clinic_south.

clinic_north_south = df[['clinic_north', 'clinic_south']]

print(type(clinic_north_south))
# Prints <class 'pandas.core.frame.DataFrame'>

# You’re getting ready to staff the clinic for March this year. You want to know how many visits took place in March last year, to help you prepare.
# Write a command that will produce a Series made up of the March data from df from all four clinic sites and save it to the variable march.
# NOTE: iloc = integer location

march = df.iloc[2]

# One of your doctors thinks that there are more clinic visits in the late Spring.
# Write a command that will produce a DataFrame made up of the data for April, May, and June from df for all four sites (rows 3 through 6).
# Save it to april_may_june.
# Inspect april_may_june using print.

april_may_june = df.iloc[3:6]
print(april_may_june)

# Prints:
    month	clinic_east	clinic_north	clinic_south	clinic_west
3	  April	  80	          80	            54	        180
4	  May	    51	          54	            54	        154
5	  June	  112	          109	            79	        129

# You’re going to staff the clinic for January of this year. You want to know how many visits took place in January of last year, to help you prepare.
# Create variable january using a logical statement that selects the row of df where the 'month' column is 'January'.
# Inspect january using print.

january = df[df.month == 'January']
print(january)

# Prints: 
	  month	clinic_east	clinic_north	clinic_south	clinic_west
0	 January	  100	        100	            23	        100

# You want to see how the number of clinic visits changed between March and April.
# Create the variable march_april, which contains the data from March and April. Do this using two logical statements combined using |, which means “or”.
# Inspect march_april using print.

march_april = df[(df.month == 'March') | (df.month == 'April')]
print(march_april)

# Prints:
    month	clinic_east	clinic_north	clinic_south	clinic_west
2	  March	     81	         96	          65	          96
3	  April	     80	         80	          54	          180
