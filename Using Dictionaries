# USING DICTIONARIES IN PYTHON

# GET A KEY
# Once you have a dictionary, you can access the values in it by providing the key. 
# We have provided a dictionary that maps the elements of astrology to the zodiac signs. Print out the list of zodiac signs associated with the "earth" element.
# Print out the list of the "fire" signs.

zodiac_elements = {"water": ["Cancer", "Scorpio", "Pisces"], "fire": ["Aries", "Leo", "Sagittarius"], "earth": ["Taurus", "Virgo", "Capricorn"], "air":["Gemini", "Libra", "Aquarius"]}


print(zodiac_elements['earth'])
print(zodiac_elements['fire'])

# Prints: 
['Taurus', 'Virgo', 'Capricorn']
['Aries', 'Leo', 'Sagittarius']


# Use a try block to try to print the caffeine level of "matcha". If there is a KeyError, print "Unknown Caffeine Level".

caffeine_level = {"espresso": 64, "chai": 40, "decaf": 0, "drip": 120}

try: 
  print(caffeine_level['matcha'])
except KeyError:
  print('Unknown Caffeine Level')
  
# Prints: Unknown Caffeine Level


# Above the try block, add "matcha" to the dictionary with a value of 30.

caffeine_level = {"espresso": 64, "chai": 40, "decaf": 0, "drip": 120}
caffeine_level['matcha'] = 30

try: 
  print(caffeine_level['matcha'])
except KeyError:
  print('Unknown Caffeine Level')
  
# Prints: 30



# SAFELY GETTING A KEY

# Dictionaries have a .get() method to search for a value instead of the my_dict[key] notation we have been using.
# If the key you are trying to .get() does not exist, it will return None by default.
# You can also specify a value to return if the key doesn’t exist. 
# Use .get() to get the value of "teraCoder"‘s user ID, with 100000 as a default value if the user doesn’t exist. 
# Store it in a variable called tc_id. Print tc_id to the console.

user_ids = {"teraCoder": 100019, "pythonGuy": 182921, "samTheJavaMaam": 123112, "lyleLoop": 102931, "keysmithKeith": 129384}

tc_id = user_ids.get('teraCoder', 100000)
print(tc_id)

# Prints: 100019


# Use .get() to get the value of "superStackSmash"‘s user ID, with 100000 as a default value if the user doesn’t exist. 
# Store it in a variable called stack_id. Print stack_id to the console.

stack_id = user_ids.get('superStackSmash', 100000)
print(stack_id)

# Prints: 100000



# DELETING A KEY

# We can use .pop() to do this. Just like with .get(), we can provide a default value to return if the key does not exist in the dictionary.
# You are designing the video game Big Rock Adventure. 
# We have provided a dictionary of items that are in the player’s inventory which add points to their health meter. 
# In one line, add the corresponding value of the key "stamina grains" to the health_points variable and remove the item "stamina grains" from the dictionary.
# If the key does not exist, add 0 to health_points.

available_items = {"health potion": 10, "cake of the cure": 5, "green elixir": 20, "strength sandwich": 25, "stamina grains": 15, "power stew": 30}
health_points = 20

health_points = health_points + available_items['stamina grains']
available_items.pop('stamina grains', 0)


# In one line, add the value of "power stew" to health_points and remove the item from the dictionary. If the key does not exist, add 0 to health_points.
# In one line, add the value of "mystic bread" to health_points and remove the item from the dictionary. If the key does not exist, add 0 to health_points.
# Print available_items and health_points.

health_points = health_points + available_items.pop('power stew', 0)
health_points = health_points + available_items.pop('mystic bread', 0)

print(available_items)
print(health_points)

# Prints: {'health potion': 10, 'cake of the cure': 5, 'green elixir': 20, 'strength sandwich': 25} and 65



# GET ALL KEYS

# Sometimes we want to operate on all of the keys in a dictionary. For example, if we have a dictionary of students in a math class and their grades:
# test_scores = {"Grace":[80, 72, 90], "Jeffrey":[88, 68, 81], "Sylvia":[80, 82, 84], "Pedro":[98, 96, 95], "Martin":[78, 80, 78], "Dina":[64, 60, 75]}
# We want to get a roster of the students in the class, without including their grades. We can do this with the built-in list() function:

>>> list(test_scores)
["Grace", "Jeffrey", "Sylvia", "Pedro", "Martin", "Dina"]

# Dictionaries also have a .keys() method that returns a dict_keys object. 
# A dict_keys object is a view object, which provides a look at the current state of the dictionary, without the user being able to modify anything. 
# The dict_keys object returned by .keys() is a set of the keys in the dictionary. 
# You cannot add or remove elements from a dict_keys object, but it can be used in the place of a list for iteration:
'''
for student in test_scores.keys():
  print(student)
  
will yield:
Grace
Jeffrey
Sylvia
Pedro
Martin
Dina
'''

# Create a variable called users and assign it to be a dict_keys object of all of the keys of the user_ids dictionary.
# Create a variable called lessons and assign it to be a dict_keys object of all of the keys of the num_exercises dictionary.

user_ids = {"teraCoder": 100019, "pythonGuy": 182921, "samTheJavaMaam": 123112, "lyleLoop": 102931, "keysmithKeith": 129384}
num_exercises = {"functions": 10, "syntax": 13, "control flow": 15, "loops": 22, "lists": 19, "classes": 18, "dictionaries": 18}

users = user_ids.keys()
lessons = num_exercises.keys()



# GET ALL VALUES

# Dictionaries have a .values() method that returns a dict_values object (just like a dict_keys object but for values!) with all of the values in the dictionary.
# It can be used in the place of a list for iteration:
'''
test_scores = {"Grace":[80, 72, 90], "Jeffrey":[88, 68, 81], "Sylvia":[80, 82, 84], "Pedro":[98, 96, 95], "Martin":[78, 80, 78], "Dina":[64, 60, 75]}
 
for score_list in test_scores.values():
  print(score_list)
  
will yield:
[80, 72, 90]
[88, 68, 81]
[80, 82, 84]
[98, 96, 95]
[78, 80, 78]
[64, 60, 75]
'''

# Create a variable called total_exercises and set it equal to 0.
# Iterate through the values in the num_exercises list and add each value to the total_exercises variable.
# Print the total_exercises variable to the console.

num_exercises = {"functions": 10, "syntax": 13, "control flow": 15, "loops": 22, "lists": 19, "classes": 18, "dictionaries": 18}

for number in num_exercises.values():
  total_exercises += number

print(total_exercises)

# Prints: 115



# GET ALL ITEMS

# You can get both the keys and the values with the .items() method. Like .keys() and .values(), it returns a dict_list object. 
# Each element of the dict_list returned by .items() is a tuple consisting of: (key, value)
# Use a for loop to iterate through the items of pct_women_in_occupation. For each key : value pair, print out a string that looks like: 
# Women make up [value] percent of [key]s.

pct_women_in_occupation = {"CEO": 28, "Engineering Manager": 9, "Pharmacist": 58, "Physician": 40, "Lawyer": 37, "Aerospace Engineer": 9}

for job, percent in pct_women_in_occupation.items():
  print('Women make up ' + str(percent) + ' percent of ' + job + 's.')
  
# Prints: 
'''
Women make up 28 percent of CEOs.
Women make up 9 percent of Engineering Managers.
Women make up 58 percent of Pharmacists.
Women make up 40 percent of Physicians.
Women make up 37 percent of Lawyers.
Women make up 9 percent of Aerospace Engineers.
'''


# REVIEW:

# We have provided a pack of tarot cards, tarot. You are going to do a three card spread of your past, present, and future.
# Create an empty dictionary called spread.

tarot = { 1:	"The Magician", 2:	"The High Priestess", 3:	"The Empress", 4:	"The Emperor", 5:	"The Hierophant", 6:	"The Lovers", 7:	"The Chariot", 8:	"Strength", 9:	"The Hermit", 10:	"Wheel of Fortune", 11:	"Justice", 12:	"The Hanged Man", 13:	"Death", 14:	"Temperance", 15:	"The Devil", 16:	"The Tower", 17:	"The Star", 18:	"The Moon", 19:	"The Sun", 20:	"Judgement", 21:	"The World", 22: "The Fool"}

spread = {}


# The first card you draw is card 13. Pop the value assigned to the key 13 out of the tarot dictionary and assign it as the value of the "past" key of spread.
# The second card you draw is card 22. Pop the value assigned to the key 22 out of the tarot dictionary and assign it as the value of the "present" key of spread.
# The third card you draw is card 10. Pop the value assigned to the key 10 out of the tarot dictionary and assign it as the value of the "future" key of spread.

spread['past'] = tarot.pop(13, None)
spread['present'] = tarot.pop(22, None)
spread['future'] = tarot.pop(10, None)


# Iterate through the items in the spread dictionary and for each key: value pair, print out a string that says: Your {key} is the {value} card.

for key, value in spread.items():
  print('Your ' + str(key) + ' is the ' + value + ' card.')
  
# Prints: 
'''
Your past is the Death card.
Your present is the The Fool card.
Your future is the Wheel of Fortune card.
'''
