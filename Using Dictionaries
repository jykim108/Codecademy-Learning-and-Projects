# USING DICTIONARIES IN PYTHON

# GET A KEY
# Once you have a dictionary, you can access the values in it by providing the key. 
# We have provided a dictionary that maps the elements of astrology to the zodiac signs. Print out the list of zodiac signs associated with the "earth" element.
# Print out the list of the "fire" signs.

zodiac_elements = {"water": ["Cancer", "Scorpio", "Pisces"], "fire": ["Aries", "Leo", "Sagittarius"], "earth": ["Taurus", "Virgo", "Capricorn"], "air":["Gemini", "Libra", "Aquarius"]}


print(zodiac_elements['earth'])
print(zodiac_elements['fire'])

# Prints: 
['Taurus', 'Virgo', 'Capricorn']
['Aries', 'Leo', 'Sagittarius']


# Use a try block to try to print the caffeine level of "matcha". If there is a KeyError, print "Unknown Caffeine Level".

caffeine_level = {"espresso": 64, "chai": 40, "decaf": 0, "drip": 120}

try: 
  print(caffeine_level['matcha'])
except KeyError:
  print('Unknown Caffeine Level')
  
# Prints: Unknown Caffeine Level


# Above the try block, add "matcha" to the dictionary with a value of 30.

caffeine_level = {"espresso": 64, "chai": 40, "decaf": 0, "drip": 120}
caffeine_level['matcha'] = 30

try: 
  print(caffeine_level['matcha'])
except KeyError:
  print('Unknown Caffeine Level')
  
# Prints: 30



# SAFELY GETTING A KEY

# Dictionaries have a .get() method to search for a value instead of the my_dict[key] notation we have been using.
# If the key you are trying to .get() does not exist, it will return None by default.
# You can also specify a value to return if the key doesn’t exist. 
# Use .get() to get the value of "teraCoder"‘s user ID, with 100000 as a default value if the user doesn’t exist. 
# Store it in a variable called tc_id. Print tc_id to the console.

user_ids = {"teraCoder": 100019, "pythonGuy": 182921, "samTheJavaMaam": 123112, "lyleLoop": 102931, "keysmithKeith": 129384}

tc_id = user_ids.get('teraCoder', 100000)
print(tc_id)

# Prints: 100019


# Use .get() to get the value of "superStackSmash"‘s user ID, with 100000 as a default value if the user doesn’t exist. 
# Store it in a variable called stack_id. Print stack_id to the console.

stack_id = user_ids.get('superStackSmash', 100000)
print(stack_id)

# Prints: 100000



# DELETING A KEY

# We can use .pop() to do this. Just like with .get(), we can provide a default value to return if the key does not exist in the dictionary.
# You are designing the video game Big Rock Adventure. 
# We have provided a dictionary of items that are in the player’s inventory which add points to their health meter. 
# In one line, add the corresponding value of the key "stamina grains" to the health_points variable and remove the item "stamina grains" from the dictionary.
# If the key does not exist, add 0 to health_points.

available_items = {"health potion": 10, "cake of the cure": 5, "green elixir": 20, "strength sandwich": 25, "stamina grains": 15, "power stew": 30}
health_points = 20

health_points = health_points + available_items['stamina grains']
available_items.pop('stamina grains', 0)


# In one line, add the value of "power stew" to health_points and remove the item from the dictionary. If the key does not exist, add 0 to health_points.
# In one line, add the value of "mystic bread" to health_points and remove the item from the dictionary. If the key does not exist, add 0 to health_points.
# Print available_items and health_points.

health_points = health_points + available_items.pop('power stew', 0)
health_points = health_points + available_items.pop('mystic bread', 0)

print(available_items)
print(health_points)

# Prints: {'health potion': 10, 'cake of the cure': 5, 'green elixir': 20, 'strength sandwich': 25} and 65
