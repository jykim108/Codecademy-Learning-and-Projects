# WORKING WITH PYTHON LISTS
# MEDICAL INSURANCE COSTS PROJECT

# You are a doctor sorting through medical insurance cost data for some patients.
# Using your knowledge of Python lists, you will store medical data and see what valuable insights you can gain from that data.

# First, take a look at the two lists in script.py.
# The list names stores the names of ten individuals, and insurance_costs stores their medical insurance costs.
# Let’s add additional data to these lists:
# Append a new individual, "Priscilla", to names.
# Append her insurance cost, 8320.0, to insurance_costs.

names = ["Mohamed", "Sara", "Xia", "Paul", "Valentina", "Jide", "Aaron", "Emily", "Nikita", "Paul"]
insurance_costs = [13262.0, 4816.0, 6839.0, 5054.0, 14724.0, 5360.0, 7640.0, 6072.0, 2750.0, 12064.0]

names.append('Priscilla')
insurance_costs.append(8320.0)

# Currently, the names and insurance_costs lists are separate, but we want each insurance cost to be paired with a name.
# Create a new variable called medical_records that combines insurance_costs and names into a list using the zip() function.
# The list should have the following structure: [(cost_0, name_0), (cost_1, name_1), ...]
# Print out medical_records in the terminal, and make sure the output is what you expected.

medical_records = list(zip(insurance_costs, names))
print(medical_records)

# Prints: [(13262.0, 'Mohamed'), (4816.0, 'Sara'), (6839.0, 'Xia'), (5054.0, 'Paul'), (14724.0, 'Valentina'), (5360.0, 'Jide'), (7640.0, 'Aaron'), (6072.0, 'Emily'), (2750.0, 'Nikita'), (12064.0, 'Paul'), (8320.0, 'Priscilla')]


# Let’s explore our medical data.
# We want to see how many medical records we’re dealing with. Create a variable called num_medical_records that stores the length of medical_records.
# Print num_medical_records with the following message: There are {number of medical records} medical records. 

num_medical_records = len(medical_records)
print("There are " + str(num_medical_records) + " medical records.")

# Prints: There are 11 medical records.


# Select the first medical record in medical_records, and save it to a variable called first_medical_record.
# Print first_medical_record with the following message: Here is the first medical record: {first medical record}

first_medical_records = medical_records[0]
print("Here is the first medical record: " + str(first_medical_records))

# Prints: Here is the first medical record: (13262.0, 'Mohamed')


# Sort medical_records so that the individuals with the lowest insurance costs appear at the start of the list.
# Print the sorted medical_records with the following message: Here are the medical records sorted by insurance cost: {sorted list}

medical_records.sort()
print("Here are the medical records sorted by insurance cost: " + str(medical_records))

# Prints: Here are the medical records sorted by insurance cost: [(2750.0, 'Nikita'), (4816.0, 'Sara'), (5054.0, 'Paul'), (5360.0, 'Jide'), (6072.0, 'Emily'), (6839.0, 'Xia'), (7640.0, 'Aaron'), (8320.0, 'Priscilla'), (12064.0, 'Paul'), (13262.0, 'Mohamed'), (14724.0, 'Valentina')]


# Let’s look at the three cheapest insurance costs in our medical records.
# Slice the medical_records list, and store the three cheapest insurance costs in a list called cheapest_three.

cheapest_three = medical_records[:3]
print("Here are the three cheapest insurance costs in our medical records: " + str(cheapest_three))

# Prints: Here are the three cheapest insurance costs in our medical records: [(2750.0, 'Nikita'), (4816.0, 'Sara'), (5054.0, 'Paul')]


# Let’s look at the three most expensive insurance costs in our medical records.
# Slice the medical_records list, and store the three most expensive insurance costs in a list called priciest_three.
# Print priciest_three with the following message: Here are the three most expensive insurance costs in our medical records: {priciest three}

priciest_three = medical_records[-3:]
print("Here are the three most exepensive insurance costs in our medical records: " + str(priciest_three))

# Prints: Here are the three most exepensive insurance costs in our medical records: [(12064.0, 'Paul'), (13262.0, 'Mohamed'), (14724.0, 'Valentina')]


# Some individuals in our medical records have the same name. For example, the name “Paul” shows up twice.
# Count the number of occurrences of “Paul” in the names list, and store the result in a variable called occurrences_paul.
# Print occurrences_paul with the following message: There are {occurrences Paul} individuals with the name Paul in our medical records. 

occurrences_paul = names.count('Paul')
print("There are " + str(occurrences_paul) + " individuals with the name Paul in our medical records.")

# Prints: There are 2 individuals with the name Paul in our medical records.



# If you’d like additional practice on lists, here are some ways you might extend this project:

# Sort the medical records alphabetically by name. You’ll have to create a new list using zip() to do this.

medical_records = list(zip(names, insurance_costs))
medical_records.sort()
print(medical_records)

# Prints: [('Aaron', 7640.0), ('Emily', 6072.0), ('Jide', 5360.0), ('Mohamed', 13262.0), ('Nikita', 2750.0), ('Paul', 5054.0), ('Paul', 12064.0), ('Priscilla', 8320.0), ('Sara', 4816.0), ('Valentina', 14724.0), ('Xia', 6839.0)]


# Select the medical records starting at index 3 and ending at index 7 and save it in a variable called middle_five_records.

middle_five_records = medical_records[3:8]
print(middle_five_records)

# Prints: [('Mohamed', 13262.0), ('Nikita', 2750.0), ('Paul', 5054.0), ('Paul', 12064.0), ('Priscilla', 8320.0)]
