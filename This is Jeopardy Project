# This Is Jeopardy!

# Project Goals
# You will work to write several functions that investigate a dataset of Jeopardy! questions and answers. 
# Filter the dataset for topics that you’re interested in, compute the average difficulty of those questions, and train to become the next Jeopardy champion!

import pandas as pd
pd.set_option('display.max_colwidth', -1)


# We’ve provided a csv file containing data about the game show Jeopardy! in a file named jeopardy.csv.
# Load the data into a DataFrame and investigate its contents. Try to print out specific columns.

df = pd.read_csv('jeopardy.csv')

print(df.head(10))

for col in df:
  print(col)

# Columns are: Show Number, Air Date, Round, Category, Value, Question, Answer
df.rename(columns={
  'Show Number': 'show_number',
  ' Air Date': 'air_date',
  ' Round': 'round',
  ' Category': 'category',
  ' Value': 'value',
  ' Question': 'question',
  ' Answer': 'answer'}, inplace=True)


# Write a function that filters the dataset for questions that contains all of the words in a list of words. 
# For example, when the list ["King", "England"] was passed to our function, the function returned a DataFrame of 152 rows. 
# Every row had the strings "King" and "England" somewhere in its " Question".

def find_word(data, phrase):
  filter_word = lambda x: all(word.lower() in x.lower() for word in phrase)
  return data.loc[data['question'].apply(filter_word)]


# We may want to eventually compute aggregate statistics, like .mean() on the " Value" column. 
# But right now, the values in that column are strings. Convert the " Value" column to floats. If you’d like to, you can create a new column with the float values.
# Now that you can filter the dataset of question, use your new column that contains the float values of each question to find the “difficulty” of certain topics. 
# For example, what is the average value of questions that contain the word "King"?

df['new_value'] = df['value'].apply(lambda x: float(x[1:].replace(',' , '')) if x != 'None' else 0)

king_value = find_word(df, ['King'])
print(king_value['new_value'].mean())

# prints 670.8108108108108


# Write a function that returns the count of the unique answers to all of the questions in a dataset. 
# For example, after filtering the entire dataset to only questions containing the word "King", we could then find all of the unique answers to those questions. 
# The answer “Henry VIII” appeared 3 times and was the most common answer.

def unique_answer(data, word):
  return data['answer'].value_counts()
