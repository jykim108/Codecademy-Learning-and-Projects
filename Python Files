# READING A FILE

# Use with to open the file welcome.txt. Save the file object as text_file.
# Read the contents of text_file and save the results in text_data.
# Print out text_data.

with open('welcome.txt') as text_file:
  text_data = text_file.read()
  print(text_data)

# Prints: Congratulations on reading your first file at codecademy.com!



# ITERATING THROUGH LINES

# When we read a file, we might want to grab the whole document in a single string, like .read() would return. But what if we wanted to store each line in a variable? 
# We can use the .readlines() function to read a text file line by line instead of having the whole thing.

# Using a with statement, create a file object pointing to the file how_many_lines.txt. Store that file object in the variable lines_doc.
# Iterate through each of the lines in lines_doc.readlines() using a for loop.
# Inside the for loop print out each line of how_many_lines.txt.

with open('how_many_lines.txt') as lines_doc:
  for line in lines_doc.readlines():
    print(line)
    
# Prints:
'''
1. How many lines do we write on the daily,
2. Many money, we write many many many
3. How many lines do you write on the daily,
4. Say you say many money, you write many many many
'''


# READING A LINE

# Sometimes you don’t want to iterate through a whole file. For that, there’s a different file method, .readline(), which will only read a single line at a time. 
# If the entire document is read line by line in this way subsequent calls to .readline() will not throw an error but will start returning an empty string (""). 
# Using a with statement, create a file object pointing to the file just_the_first.txt. Store that file object in the variable first_line_doc.
# Save the first line of just_the_first.txt into the variable first_line.
# Print out the variable first_line.

with open('just_the_first.txt') as first_line_doc:
  first_line = first_line_doc.readline()
  print(first_line)
  
# Prints: You do look, my son, in a moved sort,



# WRITING A FILE

# Reading a file is all well and good, but what if we want to create a file of our own? With Python we can do just that.
# It turns out that our open() function that we’re using to open a file to read needs another argument to open a file to write to.

with open('generated_file.txt', 'w') as gen_file:
  gen_file.write("What an incredible file!")

# Here we pass the argument 'w' to open() in order to indicate to open the file in write-mode. 
# The default argument is 'r' and passing 'r' to open() opens the file in read-mode as we’ve been doing.
# Create a file object for the file bad_bands.txt using the open() function with the w argument. Assign this object to the temporary variable bad_bands_doc.
# Use the bad_bands_doc.write() method to add the name of a musical group you dislike to the document bad_bands.

with open('bad_bands.txt', 'w') as bad_bands_doc:
  bad_bands_doc.write('Lana del Ray')



# APPENDING A FILE

# Isn’t there a way to just add a line to a file without completely deleting it? Of course there is! 
# Instead of opening the file using the argument 'w' for write-mode, we open it with 'a' for append-mode. 

with open('generated_file.txt', 'a') as gen_file:
  gen_file.write("... and it still is")

# In the code above we open a file object in the temporary variable gen_file. 
# This variable points to the file generated_file.txt and, since it’s open in append-mode, adds the line ... and it still is as a new line to the file.
# We’ve got a file, cool_dogs.txt, filled with all the cool dogs we know. Somehow while compiling this list we forgot about one very cool dog. 
# Let’s fix that problem by adding him to our cool_dogs.txt.
# Open up our file cool_dogs.txt in append-mode and assign it to the file object cool_dogs_file.
# Inside your with block, add “Air Buddy” to cool_dogs.txt. Air Buddy is a Golden Retriever that plays basketball, which more than qualifies him for this list.

with open('cool_dogs.txt', 'a') as cool_dogs_file:
  cool_dogs_file.write('Air Buddy')
  
  
# We’ve been opening these files with this with block so far, but it seems a little weird that we can only use our file variable in the indented block. Why is that? 
# The with keyword invokes something called a context manager for the file that we’re calling open() on. 
# This context manager takes care of opening the file when we call open() and then closing the file after we leave the indented block.  
# The with syntax replaces older ways to access files where you need to call .close() on the file object manually. 
# We can still open up a file and append to it with the old syntax, as long as we remember to close the file connection afterwards.

close_this_file = open('fun_file.txt')

setup = close_this_file.readline()
punchline = close_this_file.readline()

print(setup)

# In script.py there’s a file object that doesn’t get closed correctly. Let’s fix it by changing the syntax!
# Remove this line: close_this_file = open('fun_file.txt')
# And change it to use the with syntax from our previous exercises.
# Remember to indent the rest of the body so that we don’t get an IndentError.

with open('fun_file.txt') as close_this_file:
  setup = close_this_file.readline()
  punchline = close_this_file.readline()

print(setup)
