# STRING METHODS: SPLITTING STRINGS

# Your boss at the Poetry organization sent over a bunch of author names that he wants you to prepare for importing into the database. 
# Annoyingly, he sent them over as a long string with the names separated by commas.
# Using .split() and the provided string, create a list called author_names containing each individual author name as it’s own string.

authors = "Audre Lorde,Gabriela Mistral,Jean Toomer,An Qi,Walt Whitman,Shel Silverstein,Carmen Boullosa,Kamala Suraiyya,Langston Hughes,Adrienne Rich,Nikki Giovanni"

author_names = authors.split(',')
print(author_names)

# Prints: 
Output:
['Audre Lorde', 'Gabriela Mistral', 'Jean Toomer', 'An Qi', 'Walt Whitman', 'Shel Silverstein', 'Carmen Boullosa', 'Kamala Suraiyya', 'Langston Hughes', 'Adrienne Rich', 'Nikki Giovanni']


# Great work, but now it turns out they didn’t want poet’s first names (why didn’t they just say that the first time!?)
# Create another list called author_last_names that only contains the last names of the poets in the provided string.

author_last_names = []
for last_name in author_names:
  new_list = last_name.split()
  author_last_names.append(new_list[-1])

print(author_last_names)

# Prints: ['Lorde', 'Mistral', 'Toomer', 'Qi', 'Whitman', 'Silverstein', 'Boullosa', 'Suraiyya', 'Hughes', 'Rich', 'Giovanni']

# Admittedly, this task was a bit more challenging for me. I tried splitting author_names and would encounter an AttributeError.
# I finally figured out that last_name was what needed to be split, not author_names.


# We can also split strings using escape sequences. 
# Escape sequences are used to indicate that we want to split by something in a string that is not necessarily a character. 
# The two escape sequences we will cover here are: \n Newline and \t Horizontal Tab


# JOINING STRINGS

# Now that you’ve learned to break strings apart using .split(), let’s learn to put them back together using .join().
# .join() is essentially the opposite of .split(), it joins a list of strings together with a given delimiter. 
# The syntax of .join() is: 'delimiter'.join(list_you_want_to_join)

# You’ve been provided with a list of words from the first line of Jean Toomer’s poem Reapers.
# Use .join() to combine these words into a sentence and save that sentence as the string reapers_line_one.

reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]

reapers_line_one = ' '.join(reapers_line_one_words)
print(reapers_line_one)

# Prints: Black reapers with the sound of steel on stones


# You’ve been given a list, winter_trees_lines, that contains all the lines to William Carlos Williams poem, Winter Trees. 
# You’ve been asked to join together the strings in the list together into a single string that can be used to display the full poem. 
# Name this string winter_trees_full.
# Print your result to the terminal. Make sure that each line of the poem appears on a new line in your string.

winter_trees_lines = ['All the complicated details', 'of the attiring and', 'the disattiring are completed!', 'A liquid moon', 'moves gently among', 'the long branches.', 'Thus having prepared their buds', 'against a sure winter', 'the wise trees', 'stand sleeping in the cold.']

winter_trees_full = '\n'.join(winter_trees_lines)
print(winter_trees_full)

# Prints:
'''
All the complicated details
of the attiring and
the disattiring are completed!
A liquid moon
moves gently among
the long branches.
Thus having prepared their buds
against a sure winter
the wise trees
stand sleeping in the cold.
'''

# Python provides a great method for cleaning strings: .strip(). Stripping a string removes all whitespace characters from the beginning and end.
# You can also use .strip() with a character argument, which will strip that character from either end of the string.

# They sent over another list containing all the lines to the Audre Lorde poem, Love, Maybe. 
# They want you to join together all of the lines into a single string that can be used to display the poem again.
# This time, you’ve noticed that the list contains a ton of unnecessary whitespace that doesn’t appear in the actual poem.
# First, use .strip() on each line in the list to remove the unnecessary whitespace and save it as a new list love_maybe_lines_stripped.

love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']

love_maybe_lines_stripped = []
for line in love_maybe_lines:
  new_list = line.strip()
  love_maybe_lines_stripped.append(new_list)

# .join() the lines in love_maybe_lines_stripped together into one large multi-line string, love_maybe_full, that can be printed to display the poem.
# Each line of the poem should show up on its own line.

love_maybe_full = '\n'.join(love_maybe_lines_stripped)
print(love_maybe_full)

# Prints:
'''
Always
in the middle of our bloodiest battles
you lay down your arms
like flowering mines

to conquer me home.
'''


# The next string method we will cover is .replace(). Replace takes two arguments and replaces all instances of the first argument in a string with the second argument. 
# The syntax is as follows: string_name.replace(substring_being_replaced, new_substring)

# The poetry organization has sent over the bio for Jean Toomer as it currently exists on their site. 
# Notice that there was a mistake with his last name and all instances of Toomer are lacking one o.
# Use .replace() to change all instances of Tomer in the bio to Toomer. Save the updated bio to the string toomer_bio_fixed.

toomer_bio = \
"""
Nathan Pinchback Tomer, who adopted the name Jean Tomer early in his literary career, was born in Washington, D.C. in 1894. 
Jean is the son of Nathan Tomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, North Carolina. 
Jean Tomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.
"""

toomer_bio_fixed = toomer_bio.replace('Tomer', 'Toomer')


# Another interesting string method is .find(). .find() takes a string as an argument and searching the string it was run on for that string. 
# It then returns the first index value where that string is located.

# In the code editor is the first line of Gabriela Mistral’s poem God Wills It.
# At what index place does the word “disown” appear? Save that index place to the variable disown_placement.

god_wills_it_line_one = "The very earth will disown you"

disown_placement = god_wills_it_line_one.find('disown')
print(disown_placement)

# Prints: 20


# Python also provides a handy string method for including variables in strings. 
# This method is .format(). .format() takes variables as an argument and includes them in the string that it is run on. 
# You include {} marks as placeholders for where those variables will be imported.

# Write a function called poem_title_card that takes two inputs: the first input should be title and the second poet.
# The function should use .format() to return the following string: The poem "[TITLE]" is written by [POET].

def poem_title_card(title, poet):
  return "The poem \"{}\" is written by {}.".format(title, poet)

print(poem_title_card("I Hear America Singing", "Walt Whitman"))

# Prints: The poem "I Hear America Singing" is written by Walt Whitman.


# .format() can be made even more legible for other people reading your code by including keywords. 
# Previously, with .format(), you had to make sure that your variables appeared as arguments in the same order that you wanted them to appear in the string.
# This added unnecessary complications when writing code.
# By including keywords in the string, and in the arguments, you can remove that ambiguity.

# The function poem_description is supposed to use .format() to print out some quick information about a poem, but it seems to be causing some errors currently.

def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date, author, title, original_work)
  return poem_desc

# Fix the function by using keywords in the .format() method.

def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date = publishing_date, author = author, title = title, original_work = original_work)
  return poem_desc

# Run poem_description with the following arguments and save the results to the variable my_beard_description:
'''
author = "Shel Silverstein"
title = "My Beard"
original_work = "Where the Sidewalk Ends"
publishing_date = "1974"
'''

my_beard_description = poem_description(author = "Shel Silverstein", title = "My Beard", original_work = "Where the Sidewalk Ends", publishing_date = "1974")

print(my_beard_description)

# Prints: The poem My Beard by Shel Silverstein was originally published in Where the Sidewalk Ends in 1974.


# REVIEW:

# Preserve the Verse has one final task for you. 
# They have delivered you a string that contains a list of poems, titled highlighted_poems, they want to highlight on the site.
# They need your help to parse the string into something that can display the name, title, and publication date of the highlighted poems on the site.

# First, start by printing highlighted_poems to the terminal and see how it displays.

highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"

print(highlighted_poems)


# The information for each poem is separated by commas, and within this information is the title of the poem, the author, and the date of publication.
# Start by splitting highlighted_poems at the commas and saving it to highlighted_poems_list.
# Print highlighted_poems_list, how does the structure of the data look now?

highlighted_poems_list = highlighted_poems.split(',')

print(highlighted_poems_list)

# NOTE: The list is still clumped together with colons and whitespaces.


# Notice that there is inconsistent whitespace in highlighted_poems_list. Let’s clean that up.
# Start by creating a new empty list, highlighted_poems_stripped.
# Then, iterate through highlighted_poems_list using a for loop and for each poem strip away the whitespace and append it to your new list, highlighted_poems_stripped.

highlighted_poems_stripped = []
for poem in highlighted_poems_list:
  new_list = poem.strip()
  highlighted_poems_stripped.append(new_list)


# Next we want to break up all the information for each poem into it’s own list, so we end up with a list of lists.
# Create a new empty list called highlighted_poems_details.
# Iterate through highlighted_poems_stripped and split each string around the : characters and append the new lists into highlighted_poems_details.

highlighted_poems_details = []
for part in highlighted_poems_stripped:
  new_list = part.split(':')
  highlighted_poems_details.append(new_list)
  

# Great! Now we want to separate out all of the titles, the poets, and the publication dates into their own lists.
# Create three new empty lists, titles, poets, and dates.
# Iterate through highlighted_poems_details and for each list in the list append the appropriate elements into the lists titles, poets, and dates.

titles = []
poets = []
dates = []

for x in highlighted_poems_details:
  titles.append(x[0])
  poets.append(x[1])
  dates.append(x[2])
  
  
# COMMENTS: I tried the following loop, which performed the correct function but only printed the last index in the list.
'''
for poem in highlighted_poems_details:
  poem_loop = 'The poem {title} was published by {poet} in {date}'.format(title=poem[0], poet=poem[1], date=poem[2])

print(poem_loop)
'''
# I figured out that the print(poem_loop) needed to be WITHIN the function.

for poem in highlighted_poems_details:
  poem_loop = 'The poem {title} was published by {poet} in {date}'.format(title=poem[0], poet=poem[1], date=poem[2])
  print(poem_loop)
 
