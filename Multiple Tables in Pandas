# Working with Multiple DataFrames

# Inner Merge
# You are an analyst at Cool T-Shirts Inc. You are going to help them analyze some of their sales data.
# There are two DataFrames defined in the file script.py:
# sales contains the monthly revenue for Cool T-Shirts Inc. It has two columns: month and revenue.
# targets contains the goals for monthly revenue for each month. It has two columns: month and target.
# Create a new DataFrame sales_vs_targets which contains the merge of sales and targets.

import codecademylib3
import pandas as pd

sales = pd.read_csv('sales.csv')
print(sales)
targets = pd.read_csv('targets.csv')
print(targets)

sales_vs_targets = pd.merge(sales, targets)


# Cool T-Shirts Inc. wants to know the months when they crushed their targets.
# Select the rows from sales_vs_targets where revenue is greater than target. Save these rows to the variable crushing_it.

crushing_it = sales_vs_targets[sales_vs_targets.revenue > sales_vs_targets.target]


# We have some more data from Cool T-Shirts Inc. 
import codecademylib3
import pandas as pd

sales = pd.read_csv('sales.csv')
print(sales)
targets = pd.read_csv('targets.csv')
print(targets)


# The number of men’s and women’s t-shirts sold per month is in a file called men_women_sales.csv. Load this data into a DataFrame called men_women.
men_women = pd.read_csv('men_women_sales.csv')


# Merge all three DataFrames (sales, targets, and men_women) into one big DataFrame called all_data.
all_data = sales.merge(targets).merge(men_women)


# Cool T-Shirts Inc. thinks that they have more revenue in months where they sell more women’s t-shirts.
# Select the rows of all_data where: revenue is greater than target AND women is greater than men.
# Save your answer to the variable results.

results = all_data[(all_data.revenue > all_data.target) & (all_data.women > all_data.men)]


# Merge on Specific Columns
# Merge orders and products using .rename(). Save your results to the variable orders_products.

import codecademylib3
import pandas as pd

orders = pd.read_csv('orders.csv')
print(orders)
products = pd.read_csv('products.csv')
print(products)

orders_products = pd.merge(
  orders, 
  products.rename(columns={'id': 'product_id'})
  )


# Merge orders and products using left_on and right_on. Use the suffixes _orders and _products. Save your results to the variable orders_products.

orders_products = pd.merge(
  orders,
  products,
  left_on = 'product_id',
  right_on = 'id',
  suffixes = ['_orders', '_products']
)


# Mismatched Merges
# There are two hardware stores in town: Store A and Store B. Store A’s inventory is in DataFrame store_a and Store B’s inventory is in DataFrame store_b. 
# They have decided to merge into one big Super Store!
# Combine the inventories of Store A and Store B using an outer merge. Save the results to the variable store_a_b_outer.

store_a_b_outer = pd.merge(store_a, store_b, how='outer')


# Let’s return to the two hardware stores, Store A and Store B. They’re not quite sure if they want to merge into a big Super Store just yet.
# Store A wants to find out what products they carry that Store B does not carry. 
# Using a left merge, combine store_a to store_b and save the results to store_a_b_left.
# The items with null in store_b_inventory are carried by Store A, but not Store B.

store_a_b_left = pd.merge(store_a, store_b, how='left')


# Now, Store B wants to find out what products they carry that Store A does not carry. 
# Use a left join, to combine the two DataFrames but in the reverse order (i.e., store_b followed by store_a) and save the results to the variable store_b_a_left.
# Which items are not carried by Store A, but are carried by Store B?

store_b_a_left = pd.merge(store_b, store_a, how='left')


# Concatenate DataFrames
# An ice cream parlor and a bakery have decided to merge.
# The bakery’s menu is stored in the DataFrame bakery, and the ice cream parlor’s menu is stored in DataFrame ice_cream.
# Create their new menu by concatenating the two DataFrames into a DataFrame called menu.

import codecademylib3
import pandas as pd

bakery = pd.read_csv('bakery.csv')
print(bakery)
ice_cream = pd.read_csv('ice_cream.csv')
print(ice_cream)

menu = pd.concat([bakery, ice_cream])


# Cool T-Shirts Inc. just created a website for ordering their products. They want you to analyze two datasets for them:
# visits contains information on all visits to their landing page
# checkouts contains all users who began to checkout on their website

import codecademylib3
import pandas as pd

visits = pd.read_csv('visits.csv',
                        parse_dates=[1])
checkouts = pd.read_csv('checkouts.csv',
                        parse_dates=[1])

# We want to know the amount of time from a user’s initial visit to the website to when they start to check out.
# Use merge to combine visits and checkouts and save it to the variable v_to_c.

v_to_c = pd.merge(visits, checkouts)


# In order to calculate the time between visiting and checking out, \
# define a column of v_to_c called time that calculates the difference between checkout_time and visit_time for every row.

v_to_c['time'] = v_to_c.checkout_time - v_to_c.visit_time


# Use .mean() to calculate the average time to checkout and print that value to the terminal.
v_to_c_mean = v_to_c.time.mean()
