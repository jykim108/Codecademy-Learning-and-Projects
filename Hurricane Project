# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', ...]

# months of hurricanes
months = ['October', 'September', 'September',...]

# years of hurricanes
years = [1924, 1928, 1932, 1932,...]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160,...]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'],...]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M',...]

# deaths for each hurricane
deaths = [90,4000,16,...]

# 1
# Update Recorded Damages


# test function by updating damages

conversion = {"M": 1000000,
              "B": 1000000000}

damage_millions = []

def updated_damages(damages):
  for cost in damages:
    if "M" in cost:
      new_cost_m = cost.strip("M")
      actual_cost_m = float(new_cost_m)
      damage_millions.append(actual_cost_m * conversion["M"])
    elif "B" in cost:
      new_cost_b = cost.strip("B")
      actual_cost_b = float(new_cost_b)
      damage_millions.append(actual_cost_b * conversion["B"])
    else:
      damage_millions.append(cost)

updated_damages(damages)
print(damage_millions)
# 2 
# Create a Table

# Create and view the hurricanes dictionary

def hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damage_millions, deaths):
  hurricane = {} 
  hurricane_loop = len(names)

  for i in range(hurricane_loop):
      hurricane[names[i]] = {"Name": names[i], "Month": months[i], "Year": years[i], "Max Sustained Wind": max_sustained_winds[i], "Areas Affected": areas_affected[i], "Damage": damage_millions[i], "Deaths": deaths[i]}
    
  return hurricane

hurricanes = hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damage_millions, deaths)

print(hurricanes)
# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key

year_key = []

for n, m, y, ma, a, da, death in zip(names, months, years, max_sustained_winds, areas_affected, damage_millions, deaths):
  dictionary = {y: {"Name": n, "Month": m, "Year": y, "Max Sustained Wind": ma, "Areas Affected": a, "Damage": da, "Deaths": death}}
  year_key.append(dictionary)

print(year_key)

# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in

damaged_areas = {}

for areas in areas_affected:
  for i in areas:
    if i not in damaged_areas:
      damaged_areas[i] = 1
    else:
      damaged_areas[i] += 1

print(damaged_areas)

# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in

def max_affected_area(damaged_areas):

  max_areas = ''
  max_count = 0
  for areas in damaged_areas:
    if damaged_areas[areas] > max_count:
        max_areas = areas
        max_count = damaged_areas[areas]
    return max_areas, max_count

max_areas, max_count = max_affected_area(damaged_areas)
print(max_areas, max_count)

# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths

def highest_mortality(hurricanes):

  max_hurricanes = ''
  max_number = 0

  for number in hurricanes:
      if hurricanes[number]["Deaths"] > max_number:
        max_hurricanes = number
        max_number = hurricanes[number]["Detahs"]
  return max_number, max_hurricanes
  
max_hurricane, max_mortality = highest_mortality(hurricanes)
print(max_hurricane, max_mortality)
# 7
# Rating Hurricanes by Mortality

# categorize hurricanes in new dictionary with mortality severity as key

def mortality_scale(hurricanes):
  mortality_rates = {0:[], 1:[], 2:[], 3:[], 4:[]}

  for hurricane in hurricanes:
 
    rate = 0
    deaths = hurricanes[hurricane]["Deaths"]

    if deaths < 100:
      rate = 0
    elif deaths >= 100 and deaths < 500:
      rate = 1
    elif deaths >=500 and deaths < 1000:
      rate = 2
    elif deaths >= 1000 and deaths < 10000:
      rate = 3
    else: rate = 4

  if rate not in mortality_rates:
    mortality_rates[rate] = hurricanes[hurricane]
  else:
    mortality_rates[rate].append(hurricanes[hurricane])
    
  return mortality_rates

mortality_rates = mortality_scale(hurricanes)
print(mortality_rates)


# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost

def max_hurricane_damage(hurricanes):

  max_hurricane = ''
  max_damage = 0

  for hurricane in hurricanes:
    if hurricanes[hurricane]["Damage"] == "Damages not recorded":
      continue
    if hurricanes[hurricane]["Damage"] > max_damage:
      max_hurricane = hurricanes[hurricane]["Name"]
      max_damage = hurricanes[hurricane]["Damage"]

  return max_hurricane, max_damage

max_hurricane_damage, max_damage = max_hurricane_damage(hurricanes)
print(max_hurricane_damage, max_damage)



# 9
# Rating Hurricanes by Damage

# categorize hurricanes in new dictionary with damage severity as key

damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}

def scaled_damage(hurricanes):

  damaged_scaling = {0: [], 1: [], 2: [], 3: [], 4: []}
  
  for hurricane in hurricanes:

    rate = 0
    damage = hurricanes[hurricane]["Damage"]

    if damage == "Damages not recorded": 
      continue
    elif damage < damage_scale[1]:
      rate = 0
    elif damage >= damage_scale[1] and damage < damage_scale[2]:
      rate = 1
    elif damage >= damage_scale[2] and damage < damage_scale[3]:
      rate = 2
    elif damage >= damage_scale[3] and damage < damage_scale[4]:
      rate = 3
    else:
      rate = 4
    
    if rate not in damage_scale:
      damage_scale[rate] = hurricanes[hurricane]
    else:
      damaged_scaling[rate].append(hurricanes[hurricane])

  return damaged_scaling

damage_scale = scaled_damage(hurricanes)

print(damage_scale)  
