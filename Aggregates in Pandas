# Calculating Column Statistics

# Once more, we’ll revisit our orders from ShoeFly.com. Our new batch of orders is in the DataFrame orders. Examine the first 10 rows.
orders = pd.read_csv('orders.csv')
print(orders.head(10))


# Our finance department wants to know the price of the most expensive pair of shoes purchased. Save your answer to the variable most_expensive.
most_expensive = orders.price.max()


# Our fashion department wants to know how many different colors of shoes we are selling. Save your answer to the variable num_colors.
num_colors = orders.shoe_color.nunique()


# Let’s return to our orders data from ShoeFly.com.
# In the previous exercise, our finance department wanted to know the most expensive shoe that we sold.
# Now, they want to know the most expensive shoe for each shoe_type (i.e., the most expensive boot, the most expensive ballet flat, etc.).
# Save your answer to the variable pricey_shoes.
# Examine the object that you just created.

pricey_shoes = orders.groupby('shoe_type').price.max()
print(pricey_shoes)

	            price
ballet flats	 498
sandals	       498
stilettos	     468
wedges	       488

# Modify your code from the previous exercise so that it ends with reset_index, which will change pricey_shoes into a DataFrame.
# Examine the object that you’ve just created using

pricey_shoes = orders.groupby('shoe_type').price.max().reset_index()

print(pricey_shoes)

	  shoe_type	    price
0	 ballet flats	   498
1	   sandals	     498
2	  stilettos	     468
3	   wedges	       488


# Let’s calculate the 25th percentile for shoe price for each shoe_color to help Marketing decide if we have enough cheap shoes on sale. 
# Save the data to the variable cheap_shoes.
# Note: Be sure to use reset_index() at the end of your query so that cheap_shoes is a DataFrame.
# Display cheap_shoes using print.

import codecademylib3
import numpy as np
import pandas as pd

orders = pd.read_csv('orders.csv')

cheap_shoes = orders.groupby('shoe_color').price.apply(lambda x: np.percentile(x, 25)).reset_index()
print(cheap_shoes)


# At ShoeFly.com, our Purchasing team thinks that certain shoe_type/shoe_color combinations are particularly popular this year \
# (for example, blue ballet flats are all the rage in Paris).
# Create a DataFrame with the total number of shoes of each shoe_type/shoe_color combination purchased. Save it to the variable shoe_counts.
# You should be able to do this using groupby and count().
# Note: When we’re using count(), it doesn’t really matter which column we perform the calculation on. 
# You should use id in this example, but we would get the same answer if we used shoe_type or last_name.

shoe_counts = orders.groupby(['shoe_type', 'shoe_color']).id.count().reset_index()


# Pivot Tables

# In the previous example, you created a DataFrame with the total number of shoes of each shoe_type/shoe_color combination purchased for ShoeFly.com.
# The purchasing manager complains that this DataFrame is confusing.
# Make it easier for her to compare purchases of different shoe colors of the same shoe type by creating a pivot table. 
# Save your results to the variable shoe_counts_pivot.

shoe_counts_pivot = shoe_counts.pivot(
   columns='shoe_color',
   index='shoe_type',
   values='id').reset_index()
   
 
# Let’s examine some more data from ShoeFly.com. This time, we’ll be looking at data about user visits to the website \
# (the same dataset that you saw in the introduction to this lesson).
# The data is a DataFrame called user_visits. Use print and head() to examine the first few rows of the DataFrame.

import codecademylib3
import pandas as pd

user_visits = pd.read_csv('page_visits.csv')
print(user_visits.head())


# The column utm_source contains information about how users got to ShoeFly’s homepage. 
# For instance, if utm_source = Facebook, then the user came to ShoeFly by clicking on an ad on Facebook.com.
# Use a groupby statement to calculate how many visits came from each of the different sources. 
# Save your answer to the variable click_source.

click_source = user_visits.groupby('utm_source').id.count().reset_index()


# Our Marketing department thinks that the traffic to our site has been changing over the past few months. 
# Use groupby to calculate the number of visits to our site from each utm_source for each month. Save your answer to the variable click_source_by_month.

click_source_by_month = user_visits.groupby(['utm_source', 'month']).id.count().reset_index()


# The head of Marketing is complaining that this table is hard to read. Use pivot to create a pivot table where the rows are utm_source and the columns are month. 
# Save your results to the variable click_source_by_month_pivot.

click_source_by_month_pivot = click_source_by_month.pivot(
  columns='month',
  index='utm_source',
  values='id'
).reset_index()
