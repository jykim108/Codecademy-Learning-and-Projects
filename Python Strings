# ITERATING THROUGH STRINGS

# Let’s replicate a function you are already familiar with, len().
# Write a new function called get_length() that takes a string as an input and returns the number of characters in that string. 
# Do this by iterating through the string, don’t cheat and use len()!

def get_length(string):
  counter = 0
  for letter in string:
    counter += 1
  return counter
    
print(get_length('hello'))

# Prints: 5


# STRINGS AND CONDITIONALS (PART ONE)

# Write a function called letter_check that takes two inputs, word and letter.
# This function should return True if the word contains the letter and False if it does not.

def letter_check(word, letter):
  for x in word:
    if x == letter:
      return True
      break
  else: return False

print(letter_check("strawberry", "a"))

# Prints: True



# STRINGS AND CONDITIONALS (PART TWO)

# Write a function called contains that takes two arguments, big_string and little_string and returns True if big_string contains little_string.
# For example contains("watermelon", "melon") should return True and contains("watermelon", "berry") should return False

def contains(big_string, little_string):
  if little_string in big_string:
    return True
  else: return False
  
  
# Write a function called common_letters that takes two arguments, string_one and string_two and then returns a list with all of the letters they have in common.
# The letters in the returned list should be unique.

def common_letters(string_one, string_two):
  common_letter_list = []

  for a in string_one:
    if a in string_two and a not in common_letter_list:
      common_letter_list.append(a)
  return common_letter_list
  
  
# Copeland’s Corporate Company has finalized what they want their username and temporary password creation to be.
# They have enlisted your help, once again, to build the function to generate them. 
# In this exercise, you will create two functions, username_generator and password_generator.
# Let’s start with username_generator. Create a function called username_generator take two inputs, first_name and last_name and returns a user_name.
# The username should be a slice of the first three letters of their first name and the first four letters of their last name. 
# If their first name is less than three letters or their last name is less than four letters it should use their entire names.
# For example, if the employee’s name is Abe Simpson the function should generate the username AbeSimp.

def username_generator(first_name, last_name):
  if len(first_name) < 3:
    first_part = first_name
  if len(last_name) < 4:
    last_part = last_name
  username = first_name[:3] + last_name[:4]
  return username
  
print(username_generator('Frodo', 'Baggins'))
print(username_generator('The', 'Ring'))

# Prints: FroBagg and TheRing


# Now for the temporary password, they want the function to take the input user name and shift all of the letters by one to the right.
# The last letter of the username ends up as the first letter and so forth. 
# For example, if the username is AbeSimp, then the temporary password generated should be pAbeSim.
# Start by defining a function called password_generator that takes one parameter user_name and defines an empty string named password within the function body.

def password_generator(user_name):
  password = ''
  
  
# Inside password_generator, create a for loop that iterates through the indices of user_name by going from 0 to len(user_name).
# The loop should create the password by shifting all the letters of user_name one to the right. 
# To do so, add the letter at the previous index of user_name to password with each pass of the loop.
# After the for loop but still within the definition of password_generator, return the password.

  for i in range(len(user_name)):
    password += user_name[i-1]
  return password

print(password_generator("FroBagg"))

# Prints: gFroBag
