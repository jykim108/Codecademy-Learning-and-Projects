# Adding Columns

import codecademylib3
import pandas as pd

df = pd.DataFrame([
  [1, '3 inch screw', 0.5, 0.75],
  [2, '2 inch nail', 0.10, 0.25],
  [3, 'hammer', 3.00, 5.50],
  [4, 'screwdriver', 2.50, 3.00]
],
  columns=['Product ID', 'Description', 'Cost to Manufacture', 'Price']
)

# The DataFrame df contains information on products sold at a hardware store. 
# Add a column to df called 'Sold in Bulk?', which indicates if the product is sold in bulk or individually. 

df['Sold in Bulk?'] = ['Yes', 'Yes', 'No', 'No']

# Add a column to df called Is taxed?, which indicates whether or not to collect sales tax on the product. It should be 'Yes' for all rows.

df['Is taxed?'] = 'Yes'

# Add a column to df called 'Margin', which is equal to the difference between the Price and the Cost to Manufacture.

df['Margin'] = df.Price - df['Cost to Manufacture']

# Performing Column Operations

# Apply the function lower to all names in column 'Name' in df. Assign these new names to a new column of df called 'Lowercase Name'. 
df['Lowercase Name'] = df.Name.apply(str.lower)

# Create a lambda function mylambda that returns the first and last letters of a string, assuming the string is at least 2 characters long. 
mylambda = lambda x: x[0] + x[-1]

# You are managing the webpage of a somewhat violent video game and you want to check that each user’s age is 13 or greater when they visit the site.
# Write a lambda function that takes an inputted age and either returns Welcome to BattleCity! if the user is 13 or older or You must be over 13 if they are younger than 13. 

mylambda = lambda x: 'Welcome to BattleCity!' if x >= 13 else 'You must be over 13'


# Applying a Lambda to a column

import codecademylib3
import pandas as pd

df = pd.read_csv('employees.csv')

# Create a lambda function get_last_name which takes a string with someone’s first and last name (i.e., John Smith), and returns just the last name (i.e., Smith).
get_last_name = lambda x: x.split()[-1]

# Use the lambda function get_last_name to create a new column last_name with only the employees’ last name.
df['last_name'] = df.name.apply(get_last_name)


# Applying a Lambda to a row

# If an employee worked for more than 40 hours, she needs to be paid overtime (1.5 times the normal hourly wage).
# Create a lambda function total_earned that accepts an input row with keys hours_worked and hourly_wage and uses an if statement to calculate the hourly wage.

import codecademylib3
import pandas as pd

df = pd.read_csv('employees.csv')

total_earned = lambda row: (row['hours_worked']-40) \
* (row['hourly_wage'] * 1.5) \
+ (40 * row['hourly_wage']) if row['hours_worked'] > 40 else (row['hours_worked'] * row['hourly_wage'])

# Use the lambda function total_earned and apply to add a column total_earned to df with the total amount earned by each employee.
df['total_earned'] = df.apply(total_earned, axis=1)


# Renaming Columns

import codecademylib3
import pandas as pd

df = pd.read_csv('imdb.csv')

# The DataFrame df contains data about movies from IMDb.
# We want to present this data to some film producers. Right now, our column names are in lower case, and are not very descriptive. 
# Let’s modify df using the .columns attribute to make the following changes to the columns.

df.columns = ['ID', 'Title', 'Category', 'Year Released', 'Rating']

# If we didn’t know that df was a table of movie ratings, the column name might be confusing.
# To clarify, let’s rename name to movie_title.
# Use the keyword inplace=True so that you modify df rather than creating a new DataFrame!

df.rename(columns={
  'name': 'movie_title'},
  inplace = True)
